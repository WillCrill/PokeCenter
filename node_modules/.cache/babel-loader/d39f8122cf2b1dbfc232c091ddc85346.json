{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Administra\\xE7\\xE3o\\\\Documents\\\\Digital House\\\\5\\xBA Bimestre\\\\Especializa\\xE7\\xE3o Front End I\\\\pokecenter\\\\src\\\\components\\\\Input\\\\index.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState } from \"react\";\nimport { PokeCenterContext } from \"../../context/contextoFormulario\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Input = _ref => {\n  _s();\n\n  let {\n    name,\n    label,\n    type = \"text\"\n  } = _ref;\n  // Aqui devemos acessar o estado global para obter os dados\n  // do formulário e uma maneira de atualizá-los.\n  const context = useContext(PokeCenterContext);\n  const {\n    handleBlur\n  } = context; // Além disso, usaremos um estado local para lidar com o estado da input.\n\n  const [dadosTreiner, setDadosTreiner] = useState({});\n\n  const onChange = e => {\n    // Aqui devemos atualizar o estado local do input\n    setDadosTreiner({ ...dadosTreiner,\n      [e.terget.name]: e.target.value\n    });\n  };\n\n  const onBlur = e => {\n    e.preventDefault(); // Aqui devemos atualizar o estado global com os dados de\n    // cada entrada.\n    // DICA: Podemos usar o nome de cada entrada para salvar\n    // os dados no estado global usando uma notação { chave: valor }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"input-receptor\",\n    children: [/*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: name,\n      children: label\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: type,\n      value: \"Sempre tenho o mesmo valor XD\",\n      name: label,\n      id: name,\n      onChange: onChange,\n      onBlur: onBlur\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Input, \"I/5VXPLyNnIZYtGOuMbIF0PYswM=\");\n\n_c = Input;\nexport default Input;\n\nvar _c;\n\n$RefreshReg$(_c, \"Input\");","map":{"version":3,"sources":["C:/Users/Administração/Documents/Digital House/5º Bimestre/Especialização Front End I/pokecenter/src/components/Input/index.jsx"],"names":["React","useContext","useState","PokeCenterContext","Input","name","label","type","context","handleBlur","dadosTreiner","setDadosTreiner","onChange","e","terget","target","value","onBlur","preventDefault"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,QAA5B,QAA4C,OAA5C;AACA,SAASC,iBAAT,QAAkC,kCAAlC;;;AAEA,MAAMC,KAAK,GAAG,QAAoC;AAAA;;AAAA,MAAnC;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA,IAAI,GAAG;AAAtB,GAAmC;AAChD;AACA;AACA,QAAMC,OAAO,GAAGP,UAAU,CAACE,iBAAD,CAA1B;AACA,QAAM;AAACM,IAAAA;AAAD,MAAeD,OAArB,CAJgD,CAMhD;;AACA,QAAM,CAACE,YAAD,EAAeC,eAAf,IAAkCT,QAAQ,CAAC,EAAD,CAAhD;;AAEA,QAAMU,QAAQ,GAAIC,CAAD,IAAO;AACtB;AACAF,IAAAA,eAAe,CAAC,EAAC,GAAGD,YAAJ;AAAkB,OAACG,CAAC,CAACC,MAAF,CAAST,IAAV,GAAiBQ,CAAC,CAACE,MAAF,CAASC;AAA5C,KAAD,CAAf;AACD,GAHD;;AAKA,QAAMC,MAAM,GAAIJ,CAAD,IAAO;AACpBA,IAAAA,CAAC,CAACK,cAAF,GADoB,CAGpB;AACA;AAEA;AACA;AACD,GARD;;AAUA,sBACE;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA,4BACE;AAAO,MAAA,OAAO,EAAEb,IAAhB;AAAA,gBAAuBC;AAAvB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AACE,MAAA,IAAI,EAAEC,IADR;AAEE,MAAA,KAAK,EAAE,+BAFT;AAGE,MAAA,IAAI,EAAED,KAHR;AAIE,MAAA,EAAE,EAAED,IAJN;AAKE,MAAA,QAAQ,EAAEO,QALZ;AAME,MAAA,MAAM,EAAEK;AANV;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAaD,CArCD;;GAAMb,K;;KAAAA,K;AAuCN,eAAeA,KAAf","sourcesContent":["import React, { useContext, useState } from \"react\";\nimport { PokeCenterContext } from \"../../context/contextoFormulario\";\n\nconst Input = ({ name, label, type = \"text\" }) => {\n  // Aqui devemos acessar o estado global para obter os dados\n  // do formulário e uma maneira de atualizá-los.\n  const context = useContext(PokeCenterContext)\n  const {handleBlur} = context\n\n  // Além disso, usaremos um estado local para lidar com o estado da input.\n  const [dadosTreiner, setDadosTreiner] = useState({});\n\n  const onChange = (e) => {\n    // Aqui devemos atualizar o estado local do input\n    setDadosTreiner({...dadosTreiner, [e.terget.name]: e.target.value})\n  };\n\n  const onBlur = (e) => {\n    e.preventDefault();\n\n    // Aqui devemos atualizar o estado global com os dados de\n    // cada entrada.\n    \n    // DICA: Podemos usar o nome de cada entrada para salvar\n    // os dados no estado global usando uma notação { chave: valor }\n  };\n\n  return (\n    <div className=\"input-receptor\">\n      <label htmlFor={name}>{label}</label>\n      <input\n        type={type}\n        value={\"Sempre tenho o mesmo valor XD\"}\n        name={label}\n        id={name}\n        onChange={onChange}\n        onBlur={onBlur}\n      />\n    </div>\n  );\n};\n\nexport default Input;\n"]},"metadata":{},"sourceType":"module"}